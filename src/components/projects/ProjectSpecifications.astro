---
const { specifications } = Astro.props;

const items = [{ title: 'Form factor', value: specifications.formFactor, type: 'string' }];

const addItem = (
  condition: boolean,
  title: string,
  value: string | string[],
  type: 'string' | 'list'
) => {
  if (condition) items.push({ title, value, type });
};

addItem(
  specifications.layouts,
  `Layout${specifications.layouts?.length > 1 ? 's' : ''}`,
  specifications.layouts?.join(', '),
  'string'
);
addItem(
  specifications.mountingStyles,
  `Mounting style${specifications.mountingStyles?.length > 1 ? 's' : ''}`,
  specifications.mountingStyles,
  'list'
);
addItem(specifications.frontHeight, 'Front height', specifications.frontHeight, 'string');
addItem(specifications.typingAngle, 'Typing angle', specifications.typingAngle, 'string');
addItem(specifications.weight, 'Weight', specifications.weight, 'string');
---

<div class="grid gap-12 lg:grid-cols-3 lg:gap-8">
  <h2 class="text-3xl font-medium tracking-tight sm:text-4xl">Specifications</h2>
  <div class="grid grid-cols-2 gap-4 lg:col-span-2 lg:grid-cols-3">
    {
      items.map((item) => (
        <div class="flex flex-col gap-2">
          <h3 class="text-lg font-medium">{item.title}</h3>
          {item.type === 'list' ? (
            <ul class="list-inside list-disc text-sm">
              {item.value.map((value: string) => (
                <li>{value}</li>
              ))}
            </ul>
          ) : (
            <p class="text-sm">{item.value}</p>
          )}
        </div>
      ))
    }
  </div>
</div>
